### Complete AWS ALB Setup Flow: From Domain to HTTPS Backend (Detailed Guide)

This comprehensive guide explains how to set up HTTPS for your microservices backend running on AWS EC2 using Application Load Balancer (ALB). Think of it as building a secure, intelligent bridge between your frontend (hosted on Vercel) and your backend services.

#### Architecture Overview
```
Frontend (Vercel) → Domain (codeleetapp.tech) → Route 53 (DNS) → ALB (Load Balancer) → Target Groups → EC2 Services
                                                ↓
                                        ACM Certificate (SSL/TLS)
```

#### Step 1: Domain Registration and Management
**What it is:** A domain name is your website's unique address on the internet, like a postal address for your services.

**Process:**
1. **Purchase Domain:** Buy from registrars like GoDaddy, Namecheap, or directly from AWS Route 53
   - Cost: $8-15/year for .com domains
   - Choose memorable, professional names (e.g., api.yourproject.com)
2. **Why needed:** SSL certificates require domain names; IP addresses alone won't work for production HTTPS
3. **Domain Structure:** Use subdomains for organization (api.domain.com, admin.domain.com)

#### Step 2: DNS Configuration with AWS Route 53
**What it is:** DNS (Domain Name System) translates human-readable domain names into IP addresses that computers understand.

**Detailed Process:**
1. **Create Hosted Zone:**
   - Go to AWS Route 53 → Hosted Zones → Create Hosted Zone
   - Enter your root domain (e.g., codeleetapp.tech)
   - AWS provides 4 nameserver records (NS records)
2. **Update Nameservers:**
   - Copy NS records from Route 53
   - Login to your domain registrar
   - Replace default nameservers with AWS ones
   - Wait 5-60 minutes for global DNS propagation
3. **Verify DNS:** Use `nslookup yourdomain.com` to confirm it resolves

**Key Concepts:**
- **A Record:** Points domain to IPv4 address
- **CNAME Record:** Points domain to another domain
- **NS Records:** Specify which nameservers control the domain
- **TTL (Time to Live):** How long DNS records are cached

#### Step 3: SSL Certificate Management with AWS ACM
**What it is:** SSL/TLS certificates encrypt data between client and server, enabling HTTPS connections.

**Detailed Process:**
1. **Request Certificate:**
   - AWS Certificate Manager → Request Certificate → Public Certificate
   - Enter domain names (api.codeleetapp.tech, *.codeleetapp.tech for wildcard)
   - Choose DNS validation (easier than email)
2. **Domain Validation:**
   - ACM provides CNAME record details
   - Add to Route 53 hosted zone (can be automated)
   - Wait 5-30 minutes for validation
3. **Certificate Status:** Changes from "Pending" to "Issued"
4. **Auto-renewal:** ACM automatically renews certificates before expiration

**Security Benefits:**
- Data encryption in transit
- Browser trust indicators
- SEO ranking improvements
- Required for modern web standards

#### Step 4: Target Groups Configuration
**What it is:** Target groups are logical groupings of backend services that ALB can route traffic to.

**Detailed Setup:**
1. **Create Target Groups (one per service):**
   - EC2 → Load Balancing → Target Groups → Create
   - Target type: Instances (since services run on EC2)
   - Protocol: HTTP (ALB handles HTTPS termination)
   - Ports: 3001 (user-service), 3002 (problem-service), 3003 (submission-service), 3004 (evaluator-service)
2. **Health Check Configuration:**
   - Path: `/health` or `/` (endpoint that returns 200 OK)
   - Interval: 30 seconds
   - Timeout: 5 seconds
   - Healthy threshold: 2 consecutive successes
   - Unhealthy threshold: 2 consecutive failures
3. **Register Targets:**
   - Select your EC2 instance
   - Specify port for each service
   - Monitor health status in AWS console

**Health Check Importance:**
- Ensures traffic only goes to healthy services
- Automatic failover if service becomes unresponsive
- Prevents cascading failures

#### Step 5: Application Load Balancer Setup
**What it is:** ALB intelligently distributes incoming requests across multiple targets based on content and rules.

**Comprehensive Configuration:**
1. **Basic Settings:**
   - Name: descriptive name (e.g., backend-alb)
   - Scheme: Internet-facing (public access)
   - IP address type: IPv4
2. **Network Mapping:**
   - VPC: Same as your EC2 instance
   - Subnets: Select at least 2 public subnets in different AZs
   - Availability Zones: Choose multiple for high availability
3. **Security Groups:**
   - Create ALB security group allowing:
     - Inbound: HTTPS (443) from anywhere (0.0.0.0/0)
     - Inbound: HTTP (80) for redirects
     - Outbound: HTTP to EC2 security group
4. **Listeners Configuration:**
   - HTTPS:443 listener with ACM certificate
   - Optional: HTTP:80 listener for HTTPS redirects
5. **Routing Rules (Path-based routing):**
   ```
   Priority 1: /auth/* → user-service-tg
   Priority 2: /problems/* → problem-service-tg  
   Priority 3: /submissions/* → submission-service-tg
   Priority 4: /evaluate/* → evaluator-service-tg
   Default: Return 404 or forward to default service
   ```

**ALB Features:**
- Layer 7 (Application layer) routing
- Content-based routing (path, host, headers)
- SSL/TLS termination
- WebSocket support
- HTTP/2 support

#### Step 6: DNS Record Updates
**What it is:** Point your domain to the load balancer instead of directly to EC2.

**Process:**
1. **Get ALB DNS Name:** Copy from ALB details page (e.g., backend-alb-123456789.us-west-2.elb.amazonaws.com)
2. **Create Alias Record:** Route 53 → Hosted Zone → Create Record
   - Record name: api (for api.codeleetapp.tech)
   - Record type: A
   - Alias: Yes
   - Route traffic to: Application Load Balancer
   - Region: Your ALB region
   - Load balancer: Select your ALB
3. **Propagation:** Wait 5-10 minutes for DNS changes

#### Step 7: Frontend Integration and Testing
**What it is:** Update your frontend application to use the new HTTPS endpoints.

**Implementation:**
1. **Update API Base URLs:**
   ```javascript
   // Before: http://ec2-ip:3001
   // After: https://api.codeleetapp.tech
   const API_BASE = 'https://api.codeleetapp.tech';
   ```
2. **Service Endpoints:**
   - Auth: https://api.codeleetapp.tech/auth/login
   - Problems: https://api.codeleetapp.tech/problems/list
   - Submissions: https://api.codeleetapp.tech/submissions/create
   - Evaluator: https://api.codeleetapp.tech/evaluate/code
3. **Testing Strategy:**
   - Use browser developer tools
   - Test with Postman/curl
   - Monitor ALB access logs
   - Check target health status

#### Complete Request Flow (Technical Deep Dive)
1. **User Request:** Browser sends HTTPS request to api.codeleetapp.tech/auth/login
2. **DNS Resolution:** Route 53 resolves domain to ALB IP addresses
3. **SSL Handshake:** ALB presents ACM certificate, establishes encrypted connection
4. **Load Balancer Processing:** ALB examines request path (/auth/login)
5. **Rule Matching:** Path matches /auth/* rule, routes to user-service-tg
6. **Target Selection:** ALB selects healthy target from user-service-tg (EC2:3001)
7. **Backend Request:** ALB forwards HTTP request to EC2 service
8. **Response Path:** Service responds → ALB → encrypted HTTPS → client
9. **Monitoring:** CloudWatch logs request metrics, errors, latency

#### Cost Analysis
- **Domain:** $8-15/year
- **Route 53:** $0.50/month per hosted zone + $0.40 per million queries
- **ACM Certificate:** FREE
- **ALB:** ~$16/month + $0.008 per LCU-hour
- **EC2:** Existing cost (no change)
- **Total:** ~$17-20/month for small/medium traffic

#### Security Considerations
1. **Encryption:** End-to-end HTTPS encryption
2. **Certificate Management:** Auto-renewal via ACM
3. **Access Control:** Security groups and NACLs
4. **DDoS Protection:** Basic protection included with ALB
5. **WAF Integration:** Optional Web Application Firewall
6. **VPC Security:** Private subnets for backend services

#### Troubleshooting Common Issues
1. **Certificate Validation Failed:** Check DNS records, wait for propagation
2. **502 Bad Gateway:** Check target health, security groups, service status
3. **404 Not Found:** Verify ALB rules, target group registration
4. **Timeout Errors:** Check health check settings, service response time
5. **DNS Issues:** Use dig/nslookup, check nameserver configuration

### Top 50 Interview Questions on AWS ALB, HTTPS, and Microservices Setup

These are comprehensive interview questions covering AWS Load Balancing, SSL/TLS, DNS, and microservices architecture. Each answer is detailed and production-ready.

#### Basic Concepts (Questions 1-10)

**1. What is an Application Load Balancer (ALB) and how does it differ from other load balancer types?**
- ALB operates at Layer 7 (Application layer) and supports HTTP/HTTPS traffic
- Supports content-based routing (path, host, headers, query parameters)
- Better for microservices with features like WebSocket, HTTP/2, and gRPC support
- Classic LB operates at Layer 4, Network LB at Layer 4 with ultra-low latency
- ALB provides advanced routing, SSL termination, and integration with AWS services

**2. Explain the difference between HTTP and HTTPS. Why is HTTPS mandatory for modern applications?**
- HTTP: Plain text communication, data visible to intermediaries, port 80
- HTTPS: Encrypted with SSL/TLS, secure data transmission, port 443
- Modern browsers mark HTTP sites as "Not Secure"
- Required for: service workers, geolocation APIs, payment processing
- SEO benefits: Google ranks HTTPS sites higher
- Prevents man-in-the-middle attacks and data interception

**3. What is DNS and explain the DNS resolution process?**
- DNS translates human-readable domain names to IP addresses
- Resolution flow: Browser cache → OS cache → ISP DNS → Root servers → TLD servers → Authoritative nameservers
- Record types: A (IPv4), AAAA (IPv6), CNAME (alias), MX (mail), NS (nameserver)
- TTL controls caching duration
- Route 53 provides DNS with health checks and traffic routing policies

**4. What is SSL/TLS and how does the handshake process work?**
- SSL/TLS encrypts data in transit using asymmetric (public/private key) and symmetric encryption
- Handshake process:
  1. Client Hello (supported cipher suites, TLS version)
  2. Server Hello (chosen cipher, certificate)
  3. Client verifies certificate against CA
  4. Key exchange (client generates pre-master secret)
  5. Both derive session keys
  6. Encrypted communication begins
- Modern TLS 1.3 reduces handshake round trips for better performance

**5. Explain the concept of Target Groups in AWS ALB.**
- Logical grouping of targets (EC2 instances, IP addresses, Lambda functions)
- Defines how traffic is distributed and health is monitored
- Each target group has: protocol, port, health check configuration
- Supports multiple target types: instance, IP, Lambda, ALB
- Health checks determine target availability (healthy/unhealthy/draining)
- Supports sticky sessions for stateful applications

**6. What is path-based routing and provide practical examples?**
- Routes requests based on URL path patterns to different target groups
- Examples:
  - `/api/auth/*` → Authentication service
  - `/api/users/*` → User management service
  - `/api/orders/*` → Order processing service
  - `/static/*` → Static content servers
- Supports wildcards, exact matches, and regular expressions
- Priority determines rule evaluation order (lower number = higher priority)

**7. What is AWS Certificate Manager (ACM) and its benefits?**
- Managed service for SSL/TLS certificates
- Benefits:
  - Free public certificates for AWS resources
  - Automatic renewal (before 30-day expiration)
  - Integration with ALB, CloudFront, API Gateway
  - No certificate management overhead
  - Supports wildcard certificates (*.domain.com)
- Private certificates available for internal resources
- Certificate transparency logging for security

**8. Explain the difference between public and private subnets in VPC.**
- Public subnet: Has route to Internet Gateway (IGW), resources get public IPs
- Private subnet: No direct internet access, uses NAT Gateway/Instance for outbound
- ALB requires public subnets for internet-facing deployment
- Backend services typically in private subnets for security
- Route tables define subnet behavior (public vs private)

**9. What are Security Groups and NACLs? How do they differ?**
- Security Groups: Instance-level firewall, stateful, allow rules only
- NACLs: Subnet-level firewall, stateless, allow/deny rules with numbers
- Security Groups:
  - Default deny inbound, allow outbound
  - Rules based on protocol, port, source/destination
  - Return traffic automatically allowed (stateful)
- NACLs:
  - Process rules by number (lowest first)
  - Separate inbound/outbound rules required
  - Default allows all traffic

**10. What is the difference between internet-facing and internal load balancers?**
- Internet-facing: Public IP addresses, accessible from internet, requires public subnets
- Internal: Private IP addresses, accessible within VPC or via VPN/Direct Connect
- Internet-facing ALB:
  - DNS resolves to public IPs
  - Can route to targets in public or private subnets
  - Requires Internet Gateway in VPC
- Internal ALB:
  - DNS resolves to private IPs
  - Used for internal microservices communication
  - More secure for backend services

#### Advanced Configuration (Questions 11-25)

**11. How do you configure health checks for ALB target groups and what are the best practices?**
- Health check configuration:
  - Protocol: HTTP/HTTPS
  - Path: Dedicated health endpoint (e.g., `/health`, `/status`)
  - Port: Same as traffic port or custom
  - Interval: 30 seconds (default), can be 5-300 seconds
  - Timeout: 5 seconds (must be less than interval)
  - Thresholds: 2 consecutive checks for state change
- Best practices:
  - Use lightweight health endpoints
  - Check critical dependencies (database, external APIs)
  - Return proper HTTP status codes (200 for healthy)
  - Include health check logic in application
  - Monitor health check metrics in CloudWatch

**12. Explain SSL termination, SSL bridging, and SSL passthrough. When to use each?**
- SSL Termination (most common):
  - ALB decrypts HTTPS traffic, forwards HTTP to targets
  - Reduces backend CPU load, enables content inspection
  - Certificate managed by ALB/ACM
- SSL Bridging:
  - ALB decrypts, then re-encrypts to targets
  - End-to-end encryption with performance overhead
  - Separate certificates for ALB and backend
- SSL Passthrough:
  - ALB forwards encrypted traffic without decryption
  - Backend handles SSL termination
  - Used for TCP traffic on NLB, not supported on ALB

**13. How do you implement sticky sessions (session affinity) with ALB?**
- Types:
  - Duration-based: ALB-generated cookie with expiration
  - Application-based: Uses application cookie for stickiness
- Configuration:
  - Enable stickiness on target group
  - Set duration (1 second to 7 days)
  - Choose cookie name for app-based stickiness
- Use cases:
  - Stateful applications storing session data locally
  - Shopping carts, user preferences
- Considerations:
  - Reduces load balancing effectiveness
  - Can cause uneven distribution
  - Not recommended for stateless applications

**14. What are ALB listener rules and how do you prioritize them?**
- Rules define how ALB routes requests to target groups
- Rule conditions:
  - Host header (host-header)
  - Path pattern (path-pattern)
  - HTTP header (http-header)
  - HTTP method (http-request-method)
  - Query parameters (query-string)
  - Source IP (source-ip)
- Rule actions:
  - Forward to target group
  - Redirect to URL
  - Return fixed response
  - Authenticate (OIDC/Cognito)
- Priority: 1-50,000 (lower number = higher priority)
- Default rule has priority 50,000

**15. How do you handle CORS (Cross-Origin Resource Sharing) with ALB and microservices?**
- CORS is typically handled at application level, not ALB
- Options:
  1. Application-level CORS headers:
     ```javascript
     response.headers['Access-Control-Allow-Origin'] = '*'
     response.headers['Access-Control-Allow-Methods'] = 'GET,POST,PUT,DELETE'
     ```
  2. API Gateway integration for centralized CORS
  3. CloudFront for global CORS handling
  4. Custom ALB response headers (limited support)
- Best practices:
  - Specific origins instead of wildcard
  - Minimize allowed methods and headers
  - Use credentials carefully with CORS

**16. Explain ALB connection draining and how it affects deployments.**
- Connection draining (deregistration delay): Time ALB waits before terminating connections to unhealthy targets
- Process:
  1. Target marked unhealthy or being deregistered
  2. ALB stops sending new requests
  3. Existing connections continue until completion or timeout
  4. Target removed after drain period
- Configuration: 0-3600 seconds (default: 300)
- Deployment benefits:
  - Graceful shutdown during deployments
  - Prevents connection drops
  - Allows in-flight requests to complete
- Blue-green deployments leverage this for zero-downtime updates

**17. How do you monitor ALB performance and troubleshoot issues?**
- CloudWatch metrics:
  - Request count, latency (average, p50, p95, p99)
  - HTTP error codes (4xx, 5xx)
  - Target health status
  - Active connection count
- Access logs:
  - Store in S3 with detailed request information
  - Includes client IP, latency, response codes, user agent
  - Useful for debugging and analytics
- AWS X-Ray integration for distributed tracing
- Common troubleshooting:
  - 502: Backend connection issues
  - 503: No healthy targets
  - 504: Backend timeout
  - High latency: Check target health, scaling

**18. What are the different ALB algorithms and routing policies?**
- Round robin (default): Distributes requests evenly across healthy targets
- Least outstanding requests: Routes to target with fewest active requests
- Weighted routing: Based on target weights in target group
- Multi-value routing: Returns multiple healthy targets in DNS responses
- Routing considerations:
  - Connection multiplexing affects distribution
  - Target capacity and performance variations
  - Health check impacts on routing decisions
- Custom routing via weighted target groups

**19. How do you implement WAF (Web Application Firewall) with ALB?**
- AWS WAF integration:
  - Attach WAF ACL to ALB
  - Rules for common attacks (SQL injection, XSS)
  - Rate limiting and geo-blocking
  - Custom rules based on IP, headers, body
- Common rule types:
  - AWS managed rule groups
  - Custom IP whitelist/blacklist
  - Size constraints and rate limiting
  - Regex pattern matching
- Benefits:
  - DDoS protection
  - Application-layer security
  - Compliance requirements
- Cost: $1/month per ACL + $1 per million requests

**20. Explain ALB integration with Auto Scaling Groups.**
- Automatic target registration:
  - ASG launches instances
  - Instances automatically registered with target groups
  - Health checks determine instance availability
- Scaling triggers:
  - CloudWatch metrics from ALB (request count, latency)
  - Target tracking policies
  - Step/simple scaling policies
- Health check types:
  - EC2 health check (instance status)
  - ELB health check (application health)
  - Both (recommended for comprehensive health)
- Termination process:
  - ASG notifies ALB of termination
  - Connection draining begins
  - Instance terminated after drain period

**21. How do you secure ALB with Security Groups and best practices?**
- ALB Security Group rules:
  - Inbound: HTTPS (443) from 0.0.0.0/0 for public access
  - Inbound: HTTP (80) for redirects (optional)
  - Outbound: HTTP to backend security group
- Backend Security Group:
  - Inbound: HTTP from ALB security group only
  - Outbound: Database, external API access
- Best practices:
  - Principle of least privilege
  - Use security group references instead of IP ranges
  - Separate security groups for different tiers
  - Regular security group audits
  - Enable VPC Flow Logs for monitoring

**22. What is Server Name Indication (SNI) and how does ALB support it?**
- SNI allows multiple SSL certificates on single IP address
- Client includes hostname in TLS handshake
- ALB selects appropriate certificate based on hostname
- Benefits:
  - Cost reduction (fewer IPs needed)
  - Simplified certificate management
  - Support for multiple domains
- ALB SNI support:
  - Multiple certificates per listener
  - Automatic certificate selection
  - Wildcard certificate support
- Use cases: Multi-tenant applications, multiple domains

**23. How do you implement blue-green deployments with ALB?**
- Strategy:
  1. Create two identical target groups (blue/green)
  2. Blue serves production traffic initially
  3. Deploy new version to green environment
  4. Test green environment thoroughly
  5. Switch ALB rules to route traffic to green
  6. Monitor and rollback if needed
- Implementation options:
  - Weighted routing for gradual shift
  - Rule-based routing for instant switch
  - DNS-based switching with Route 53
- Benefits:
  - Zero-downtime deployments
  - Instant rollback capability
  - Full environment testing
- Tools: AWS CodeDeploy, custom scripts, Terraform

**24. Explain ALB request routing and content-based routing capabilities.**
- Content-based routing conditions:
  - Host header: Route based on domain/subdomain
  - Path: Route based on URL path patterns
  - HTTP headers: Custom header-based routing
  - Query parameters: Route based on query strings
  - HTTP methods: Different handling for GET/POST
- Advanced routing:
  - Multiple conditions (AND logic)
  - Wildcard patterns (* and ?)
  - Regular expressions for complex patterns
- Use cases:
  - API versioning (v1/v2 routing)
  - A/B testing
  - Mobile vs desktop routing
  - Multi-tenant applications

**25. How do you handle WebSocket connections with ALB?**
- ALB native WebSocket support:
  - Upgrade HTTP connection to WebSocket
  - Maintains persistent connections
  - Load balances initial handshake
- Configuration:
  - No special ALB configuration needed
  - Ensure backend supports WebSocket
  - Connection draining affects existing WebSocket connections
- Considerations:
  - Sticky sessions recommended for WebSocket
  - Health checks should not interfere with WebSocket endpoints
  - Monitor connection counts and duration
- Use cases: Real-time applications, chat systems, live updates

#### Security and Compliance (Questions 26-35)

**26. How do you implement end-to-end encryption with ALB?**
- Architecture options:
  1. SSL termination at ALB + HTTPS to backends
  2. SSL passthrough (NLB) with backend termination
  3. Double encryption with different certificates
- Implementation:
  - ALB certificate from ACM
  - Backend certificates (self-signed or CA)
  - Security group rules for HTTPS backend traffic
- Benefits:
  - Data protection in transit
  - Compliance requirements (HIPAA, PCI DSS)
  - Zero trust security model
- Challenges:
  - Performance overhead
  - Certificate management complexity
  - Health check configuration

**27. What are the compliance considerations for ALB in regulated industries?**
- HIPAA compliance:
  - Sign Business Associate Agreement (BAA)
  - Enable access logging to encrypted S3
  - VPC Flow Logs for network monitoring
  - Regular security assessments
- PCI DSS compliance:
  - Strong encryption (TLS 1.2+)
  - Secure key management via ACM
  - Access controls and logging
  - Network segmentation
- SOC compliance:
  - AWS provides SOC reports
  - Implement proper access controls
  - Monitor and log all activities
  - Data residency considerations

**28. How do you implement authentication and authorization with ALB?**
- ALB authentication features:
  - OIDC (OpenID Connect) integration
  - Amazon Cognito User Pools
  - SAML 2.0 support
- Authentication flow:
  1. Unauthenticated request to ALB
  2. ALB redirects to identity provider
  3. User authenticates with IdP
  4. IdP returns token/assertion
  5. ALB validates and creates session
  6. Request forwarded to backend with headers
- Configuration:
  - Authentication action in listener rules
  - Session timeout and cookie settings
  - Custom claims and scopes
- Backend receives user context in HTTP headers

**29. How do you protect ALB from DDoS attacks?**
- Built-in protection:
  - AWS Shield Standard (included)
  - Automatic DDoS mitigation
  - Distributed infrastructure
- Enhanced protection:
  - AWS Shield Advanced ($3000/month)
  - DDoS Response Team (DRT) support
  - Cost protection and detailed reporting
- Additional measures:
  - AWS WAF rate limiting
  - CloudFront distribution
  - Route 53 health checks
  - Auto Scaling for capacity
- Best practices:
  - Monitor unusual traffic patterns
  - Implement circuit breakers
  - Use multiple AZs
  - Prepare incident response plan

**30. What is AWS Config and how do you use it for ALB compliance?**
- AWS Config monitors resource configurations
- ALB compliance rules:
  - alb-http-to-https-redirection-check
  - alb-waf-enabled
  - elb-acm-certificate-required
  - elb-logging-enabled
- Benefits:
  - Continuous compliance monitoring
  - Configuration drift detection
  - Automated remediation
  - Historical configuration tracking
- Integration:
  - CloudTrail for API logging
  - Systems Manager for remediation
  - SNS for notifications
  - Lambda for custom rules

**31. How do you implement network segmentation with ALB?**
- Multi-tier architecture:
  - Public subnet: ALB only
  - Private subnet: Application servers
  - Database subnet: Data tier
- Security controls:
  - NACLs for subnet-level filtering
  - Security groups for instance-level
  - Route tables for traffic control
  - VPC endpoints for AWS services
- DMZ implementation:
  - ALB in DMZ subnet
  - Application servers in secure zone
  - Database in most restricted zone
- Monitoring:
  - VPC Flow Logs
  - GuardDuty for threat detection
  - CloudTrail for API monitoring

**32. What are the data privacy considerations with ALB logging?**
- Access logs contain:
  - Client IP addresses
  - Request URLs and headers
  - Response codes and timing
  - SSL cipher information
- Privacy measures:
  - S3 bucket encryption
  - Access control policies
  - Log retention policies
  - PII data handling
- GDPR considerations:
  - Right to be forgotten
  - Data minimization
  - Consent management
  - Geographic restrictions
- Best practices:
  - Encrypt logs at rest and in transit
  - Implement log rotation
  - Anonymize sensitive data
  - Regular access reviews

**33. How do you implement certificate rotation and management?**
- ACM automatic renewal:
  - Renews 30 days before expiration
  - DNS validation required
  - Email notifications for issues
- Manual certificate management:
  - Import custom certificates
  - Set expiration alerts
  - Plan renewal process
- Best practices:
  - Use ACM when possible
  - Implement cert monitoring
  - Test renewal process
  - Maintain certificate inventory
- Integration:
  - CloudWatch alarms for expiration
  - Lambda for custom notifications
  - Systems Manager for certificate storage

**34. What is AWS PrivateLink and how does it work with ALB?**
- PrivateLink enables private connectivity:
  - VPC endpoints for AWS services
  - Interface endpoints powered by ALB
  - No internet gateway required
- ALB as VPC endpoint service:
  - Expose services to other VPCs
  - Cross-account access
  - Private DNS names
  - Network ACLs and security groups
- Benefits:
  - Enhanced security
  - Reduced data transfer costs
  - Simplified network architecture
- Use cases:
  - SaaS provider services
  - Partner integrations
  - Multi-account architectures

**35. How do you handle sensitive data in ALB configurations?**
- Secrets management:
  - AWS Secrets Manager for credentials
  - Systems Manager Parameter Store
  - IAM roles instead of keys
  - Certificate private keys in ACM
- Configuration best practices:
  - No hardcoded secrets in rules
  - Environment-specific configurations
  - Least privilege access
  - Regular rotation schedules
- Monitoring:
  - CloudTrail for configuration changes
  - Config for compliance monitoring
  - GuardDuty for anomaly detection
- Data classification:
  - Identify sensitive data flows
  - Implement appropriate controls
  - Document data handling procedures

#### Performance and Optimization (Questions 36-45)

**36. How do you optimize ALB performance and reduce latency?**
- Performance optimization strategies:
  - Place ALB in multiple AZs close to users
  - Enable HTTP/2 and gRPC support
  - Use connection multiplexing efficiently
  - Optimize backend response times
- Network optimization:
  - VPC placement in appropriate regions
  - Enhanced networking on EC2 instances
  - Placement groups for high throughput
  - Direct Connect for on-premises connectivity
- Application optimization:
  - Efficient health check endpoints
  - Proper connection pooling
  - Asynchronous processing where possible
  - CDN integration with CloudFront
- Monitoring:
  - Target response time metrics
  - Connection count monitoring
  - Request distribution analysis

**37. What are ALB connection limits and how do you scale beyond them?**
- ALB limits:
  - Default: 55,000 connections per ALB node
  - Can request increase to 350,000+ connections
  - Multiple ALB nodes scale automatically
  - Cross-AZ traffic considerations
- Scaling strategies:
  - Use multiple ALBs with DNS round-robin
  - Implement CloudFront for connection pooling
  - Optimize backend connection handling
  - Use NLB for higher connection counts
- Connection optimization:
  - HTTP keep-alive headers
  - Connection pooling in applications
  - Proper timeout configurations
  - Monitor connection metrics

**38. How do you implement caching strategies with ALB?**
- ALB doesn't provide native caching, but integrates with:
  - CloudFront for global edge caching
  - ElastiCache for application-level caching
  - Application-level caching (Redis, Memcached)
- CloudFront + ALB:
  - Cache static content at edge locations
  - Dynamic content served by ALB
  - Origin failover capabilities
  - Geographic restrictions and WAF
- Cache strategies:
  - TTL-based caching
  - Cache invalidation policies
  - Conditional requests (ETags)
  - Cache warming strategies
- Benefits:
  - Reduced backend load
  - Improved response times
  - Better user experience globally

**39. How do you handle traffic spikes and auto-scaling with ALB?**
- ALB automatic scaling:
  - Scales nodes automatically based on traffic
  - Pre-warming available for predictable spikes
  - Cross-AZ load distribution
  - Integration with Auto Scaling Groups
- Auto Scaling configuration:
  - Target tracking scaling policies
  - Step scaling for rapid response
  - Scheduled scaling for predictable loads
  - Health check grace periods
- Traffic spike preparation:
  - Request pre-warming from AWS
  - Implement circuit breakers
  - Use SQS for request queuing
  - Plan capacity requirements
- Monitoring during spikes:
  - Real-time metrics dashboard
  - Automated alerting
  - Incident response procedures

**40. What is connection multiplexing and how does it affect ALB performance?**
- Connection multiplexing:
  - ALB maintains persistent connections to targets
  - Multiple client requests share backend connections
  - Reduces connection establishment overhead
  - HTTP/1.1 and HTTP/2 support
- Performance benefits:
  - Reduced backend connection load
  - Lower latency for subsequent requests
  - Better resource utilization
  - Improved throughput
- Considerations:
  - Affects load distribution
  - Connection draining behavior
  - Backend connection pooling
  - Keep-alive timeout settings
- Optimization:
  - Configure appropriate timeouts
  - Monitor connection metrics
  - Balance multiplexing vs. distribution

**41. How do you optimize ALB costs?**
- Cost optimization strategies:
  - Right-size ALB capacity
  - Use appropriate instance types for targets
  - Optimize data transfer costs
  - Implement efficient health checks
- ALB pricing components:
  - Hourly charge per ALB
  - Load Balancer Capacity Units (LCUs)
  - Data processing charges
  - Cross-AZ data transfer
- Cost reduction techniques:
  - Consolidate multiple ALBs where possible
  - Use internal ALBs for internal traffic
  - Optimize rule complexity
  - Monitor unused resources
- Reserved capacity:
  - Not available for ALB directly
  - Reserve underlying EC2 instances
  - Consider Savings Plans for compute

**42. How do you implement multi-region deployments with ALB?**
- Multi-region architecture:
  - ALB in each region
  - Route 53 for global load balancing
  - Cross-region data replication
  - Regional failover capabilities
- Route 53 routing policies:
  - Latency-based routing
  - Geolocation routing
  - Health check-based failover
  - Weighted routing for testing
- Challenges:
  - Data consistency across regions
  - Certificate management
  - Monitoring and alerting
  - Cost optimization
- Best practices:
  - Automate deployments
  - Implement health checks
  - Plan disaster recovery
  - Monitor cross-region latency

**43. What are the differences between ALB request routing and connection routing?**
- Request routing (ALB default):
  - Routes individual HTTP requests
  - Enables advanced routing features
  - Better for microservices architectures
  - Supports content-based routing
- Connection routing:
  - Routes at connection level (Layer 4)
  - Used by Network Load Balancer
  - Better for TCP/UDP protocols
  - Ultra-low latency requirements
- ALB advantages:
  - Application-aware routing
  - SSL termination
  - WebSocket support
  - Integration with AWS services
- When to use each:
  - ALB: Web applications, APIs, microservices
  - NLB: Gaming, IoT, high-performance computing

**44. How do you troubleshoot ALB performance issues?**
- Common performance issues:
  - High latency
  - Timeout errors
  - Uneven load distribution
  - Connection errors
- Diagnostic tools:
  - CloudWatch metrics and alarms
  - ALB access logs analysis
  - X-Ray distributed tracing
  - VPC Flow Logs
- Performance metrics to monitor:
  - Target response time
  - Request count and distribution
  - Error rates (4xx, 5xx)
  - Active connection count
- Resolution strategies:
  - Scale target capacity
  - Optimize application code
  - Review health check configuration
  - Adjust timeout settings

**45. How do you implement A/B testing with ALB?**
- A/B testing strategies:
  - Weighted routing between versions
  - Header-based routing (user agent, custom headers)
  - Query parameter routing
  - Geographic routing
- Implementation approaches:
  - Multiple target groups for versions
  - Weighted routing rules
  - Lambda@Edge for complex logic
  - Feature flags in applications
- Metrics and analysis:
  - Conversion rate tracking
  - Performance comparison
  - User experience monitoring
  - Statistical significance testing
- Best practices:
  - Start with small traffic percentages
  - Monitor both versions closely
  - Have rollback procedures ready
  - Document test parameters

#### Troubleshooting and Best Practices (Questions 46-50)

**46. What are the most common ALB errors and how do you troubleshoot them?**
- 502 Bad Gateway:
  - Causes: Target unreachable, connection timeout, invalid response
  - Troubleshooting: Check target health, security groups, application logs
  - Solutions: Fix backend issues, adjust timeouts, verify network connectivity
- 503 Service Unavailable:
  - Causes: No healthy targets, target group misconfiguration
  - Troubleshooting: Review target registration, health check settings
  - Solutions: Scale targets, fix health checks, register targets properly
- 504 Gateway Timeout:
  - Causes: Backend processing timeout, slow database queries
  - Troubleshooting: Review application performance, increase timeouts
  - Solutions: Optimize backend code, scale resources, implement caching
- Connection errors:
  - Causes: Security group restrictions, network ACLs, target issues
  - Troubleshooting: Verify network path, check logs, test connectivity

**47. What are ALB best practices for production environments?**
- Architecture best practices:
  - Deploy across multiple AZs
  - Use private subnets for applications
  - Implement proper security groups
  - Plan for disaster recovery
- Configuration best practices:
  - Use meaningful names and tags
  - Implement comprehensive health checks
  - Configure appropriate timeouts
  - Enable access logging
- Security best practices:
  - Use ACM for certificate management
  - Implement WAF protection
  - Regular security assessments
  - Monitor for anomalies
- Operational best practices:
  - Automate deployments
  - Monitor key metrics
  - Plan capacity requirements
  - Document procedures

**48. How do you implement disaster recovery with ALB?**
- Multi-AZ deployment:
  - ALB automatically distributes across AZs
  - Target groups span multiple AZs
  - Automatic failover between AZs
- Multi-region DR:
  - Route 53 health checks and failover
  - Cross-region data replication
  - Automated or manual failover
  - RTO/RPO planning
- Backup and recovery:
  - Infrastructure as Code (CloudFormation/Terraform)
  - Configuration backups
  - Database backup strategies
  - Testing and validation procedures
- DR testing:
  - Regular failover testing
  - Document recovery procedures
  - Automate where possible
  - Measure recovery times

**49. What monitoring and alerting should be implemented for ALB?**
- Key metrics to monitor:
  - Request count and rate
  - Target response time (average, percentiles)
  - HTTP error rates (4xx, 5xx)
  - Target health status
  - Active connection count
- CloudWatch alarms:
  - High error rate thresholds
  - Response time degradation
  - Target health failures
  - Unusual traffic patterns
- Log analysis:
  - Access log patterns
  - Error log analysis
  - Security event detection
  - Performance trend analysis
- Dashboard creation:
  - Real-time metrics visualization
  - Historical trend analysis
  - Multi-dimensional views
  - Alert status summary

**50. How do you plan capacity and scaling for ALB?**
- Capacity planning factors:
  - Expected request volume
  - Request size and complexity
  - Geographic distribution
  - Seasonal traffic patterns
- ALB scaling considerations:
  - Automatic node scaling
  - LCU (Load Balancer Capacity Unit) calculations
  - Pre-warming for large spikes
  - Regional capacity limits
- Target scaling:
  - Auto Scaling Group policies
  - Predictive scaling
  - Target tracking metrics
  - Manual scaling procedures
- Performance testing:
  - Load testing scenarios
  - Stress testing limits
  - Failure mode testing
  - Capacity validation
- Cost optimization:
  - Right-sizing strategies
  - Reserved Instance planning
  - Data transfer optimization
  - Resource utilization monitoring
